install.packages("cli", dependencies = TRUE)
library(cli)
packageVersion("cli")
install.packages("tidymodels", dependencies = TRUE)
packageVersion("cli")
library(cli)
library(cli)
install.packages("tidymodels", dependencies = TRUE)
install.packages("tidymodels", dependencies = TRUE)
q()
install.packages("tidymodels", dependencies = TRUE)
brary(tidymodels)>
q()
q()
library(tidymodels)
install.packages("tidymodels", dependencies = TRUE)
library(tidymodels)
install.packages(c("tidymodels", "workflowsets", "yardstick"), type = "source", dependencies = TRUE)
remove.packages(c("tidymodels", "workflowsets", "yardstick"))
install.packages("tidymodels", dependencies = TRUE)
library(tidymodels)
q()
library(tidymodels)
install.packages("tidymodels", dependencies = TRUE)
library(tidymodels)
install.packages("tidymodels", dependencies = TRUE)
q()
install.packages("tidymodels", dependencies = TRUE)
q()
install.packages("tidymodels", dependencies = TRUE)
install.packages("tidymodels", dependencies = TRUE)
q()
install.packages("tidymodels", dependencies = TRUE)
q()
install.packages("tidymodels", dependencies = TRUE)
library(tidymodels)
q()
library(tidymodels)
q()
q()
install.packages('reshape2')
q()
install.packages('shiny')
install.packages('shinydashboard')
library('shiny')
library('shinydashboard')
library('shinydashboard')
q()
library(shiny); runApp('final.R')
shinyApp(
ui = tagList(
Switch.shinyInput(
inputId = "animate",
value = TRUE,
label = "Animate"
),
reactOutput("progress")
),
server = function(input, output) {
output$progress <- renderReact({
ProgressBar(animate = input$animate)
})
}
)
library(shiny)
library(shiny.blueprint)
install.packages('shiny.blueprint')
shinyApp(
ui = tagList(
Switch.shinyInput(
inputId = "animate",
value = TRUE,
label = "Animate"
),
reactOutput("progress")
),
server = function(input, output) {
output$progress <- renderReact({
ProgressBar(animate = input$animate)
})
}
)
#-------------------------------------------------------------------------------
# Run the application
shinyApp(ui = ui, server = server)
ggplot(weather_forecast, aes(x = new_date)) +
geom_line(aes_string(y = paste0("main$", feature)), linewidth = 1.5, color="#696aad") +
labs(x = "", y = "") +
scale_x_datetime(date_breaks = "12 hour", date_labels = "%a-%d\n%H:%M") +
theme_classic()}
ggplot(weather_forecast, aes(x = new_date)) +  # ✅ SỬA CHỖ NÀY
geom_line(
aes_string(y = paste0("main$", feature)),
linewidth = 1.5,
color = "#696aad"
) +
labs(x = "", y = "") +
scale_x_datetime(
date_breaks = "12 hour",
date_labels = "%a-%d\n%H:%M"
) +
theme_classic()}
ggplot(weather_forecast, aes(x = new_date)) +  # ✅ SỬA CHỖ NÀY
geom_line(
aes_string(y = paste0("main$", feature)),
linewidth = 1.5,
color = "#696aad"
) +
labs(x = "", y = "") +
scale_x_datetime(
date_breaks = "12 hour",
date_labels = "%a-%d\n%H:%M"
) +
theme_classic())}
output$pt1 <- renderPlot({
weather_forecast_data <- data_forecast(lat, lon, api_key)
weather_forecast <- as_tibble(weather_forecast_data$list)
weather_forecast$new_date <- ymd_hms(weather_forecast$dt_txt)
feature <- input$features
if (feature == 'rain'){
ggplot(weather_forecast, aes(x = new_date)) +
geom_col(aes(y = rain[["3h"]]), fill = "#696aad") +
labs(x = "", y = "Rain (mm)") +
scale_x_datetime(date_breaks = "12 hour", date_labels = "%a-%d\n%H:%M") +
theme_classic()
} else {
ggplot(weather_forecast, aes(x = new_date)) +  # ✅ SỬA CHỖ NÀY
geom_line(
aes_string(y = paste0("main$", feature)),
linewidth = 1.5,
color = "#696aad"
) +
labs(x = "", y = "") +
scale_x_datetime(
date_breaks = "12 hour",
date_labels = "%a-%d\n%H:%M"
) +
theme_classic())}
output$pt2 <- renderDataTable({
weather_forecast_data <- data_forecast(lat, lon, api_key)
weather_forecast <- as_tibble(weather_forecast_data$list)
# Create new_date for "dt" time data
weather_forecast <- weather_forecast %>%
mutate(new_date = format(as.POSIXct(as.numeric(dt)), "%d %a %b %Y"))
# Create new dataframe
table_plot <- weather_forecast %>%
group_by(new_date) %>%
summarize(
Temperature = first(format(main$temp - 273.2, digits=4)),
Condition = first(weather[[1]]$description)) %>%
rename(Date = new_date)
datatable(table_plot,
options = list(searching = FALSE,
paging = FALSE),
rownames=FALSE)
})
#---------------------Forecast--------------------------------------------------
# Get weather forecast
renderPlot2 <- function(input, output, lat, lon){
data_forecast <- function(lat, lon, api_key){
weather_forecast_api <- "https://api.openweathermap.org/data/2.5/forecast?lat=%s&lon=%s&appid=%s"
api_call <- sprintf(weather_forecast_api, lat, lon, api_key)
if(GET(api_call)$status == 200){
json <- fromJSON(api_call)
return(json)
}
}
output$pt1 <- renderPlot({
weather_forecast_data <- data_forecast(lat, lon, api_key)
weather_forecast <- as_tibble(weather_forecast_data$list)
weather_forecast$new_date <- ymd_hms(weather_forecast$dt_txt)
feature <- input$features
if (feature == 'rain'){
ggplot(weather_forecast, aes(x = new_date)) +
geom_col(aes(y = rain[["3h"]]), fill = "#696aad") +
labs(x = "", y = "Rain (mm)") +
scale_x_datetime(date_breaks = "12 hour", date_labels = "%a-%d\n%H:%M") +
theme_classic()
} else {
ggplot(weather_forecast, aes(x = new_date)) +  # ✅ SỬA CHỖ NÀY
geom_line(
aes_string(y = paste0("main$", feature)),
linewidth = 1.5,
color = "#696aad"
) +
labs(x = "", y = "") +
scale_x_datetime(
date_breaks = "12 hour",
date_labels = "%a-%d\n%H:%M"
) +
theme_classic())}
ggplot(weather_forecast, aes(x = new_date)) +  # ✅ SỬA CHỖ NÀY
geom_line(
aes_string(y = paste0("main$", feature)),
linewidth = 1.5,
color = "#696aad"
) +
labs(x = "", y = "") +
scale_x_datetime(
date_breaks = "12 hour",
date_labels = "%a-%d\n%H:%M"
) +
theme_classic()}
output$pt1 <- renderPlot({
weather_forecast_data <- data_forecast(lat, lon, api_key)
weather_forecast <- as_tibble(weather_forecast_data$list)
weather_forecast$new_date <- ymd_hms(weather_forecast$dt_txt)
feature <- input$features
if (feature == 'rain'){
ggplot(weather_forecast, aes(x = new_date)) +
geom_col(aes(y = rain[["3h"]]), fill = "#696aad") +
labs(x = "", y = "Rain (mm)") +
scale_x_datetime(date_breaks = "12 hour", date_labels = "%a-%d\n%H:%M") +
theme_classic()
} else {
ggplot(weather_forecast, aes(x = new_date)) +  # ✅ SỬA CHỖ NÀY
geom_line(
aes_string(y = paste0("main$", feature)),
linewidth = 1.5,
color = "#696aad"
) +
labs(x = "", y = "") +
scale_x_datetime(
date_breaks = "12 hour",
date_labels = "%a-%d\n%H:%M"
) +
theme_classic()}
})
output$pt2 <- renderDataTable({
weather_forecast_data <- data_forecast(lat, lon, api_key)
weather_forecast <- as_tibble(weather_forecast_data$list)
# Create new_date for "dt" time data
weather_forecast <- weather_forecast %>%
mutate(new_date = format(as.POSIXct(as.numeric(dt)), "%d %a %b %Y"))
# Create new dataframe
table_plot <- weather_forecast %>%
group_by(new_date) %>%
summarize(
Temperature = first(format(main$temp - 273.2, digits=4)),
Condition = first(weather[[1]]$description)) %>%
rename(Date = new_date)
datatable(table_plot,
options = list(searching = FALSE,
paging = FALSE),
rownames=FALSE)
})
#---------------------Forecast--------------------------------------------------
# Get weather forecast
renderPlot2 <- function(input, output, lat, lon){
data_forecast <- function(lat, lon, api_key){
weather_forecast_api <- "https://api.openweathermap.org/data/2.5/forecast?lat=%s&lon=%s&appid=%s"
api_call <- sprintf(weather_forecast_api, lat, lon, api_key)
if(GET(api_call)$status == 200){
json <- fromJSON(api_call)
return(json)
}
}
output$pt1 <- renderPlot({
weather_forecast_data <- data_forecast(lat, lon, api_key)
weather_forecast <- as_tibble(weather_forecast_data$list)
weather_forecast$new_date <- ymd_hms(weather_forecast$dt_txt)
feature <- input$features
if (feature == 'rain'){
ggplot(weather_forecast, aes(x = new_date)) +
geom_col(aes(y = rain[["3h"]]), fill = "#696aad") +
labs(x = "", y = "Rain (mm)") +
scale_x_datetime(date_breaks = "12 hour", date_labels = "%a-%d\n%H:%M") +
theme_classic()
} else {
ggplot(weather_forecast, aes(x = new_date)) +  # ✅ SỬA CHỖ NÀY
geom_line(
aes_string(y = paste0("main$", feature)),
linewidth = 1.5,
color = "#696aad"
) +
labs(x = "", y = "") +
scale_x_datetime(
date_breaks = "12 hour",
date_labels = "%a-%d\n%H:%M"
) +
theme_classic()}
})
output$pt2 <- renderDataTable({
weather_forecast_data <- data_forecast(lat, lon, api_key)
weather_forecast <- as_tibble(weather_forecast_data$list)
# Create new_date for "dt" time data
weather_forecast <- weather_forecast %>%
mutate(new_date = format(as.POSIXct(as.numeric(dt)), "%d %a %b %Y"))
# Create new dataframe
table_plot <- weather_forecast %>%
group_by(new_date) %>%
summarize(
Temperature = first(format(main$temp - 273.2, digits=4)),
Condition = first(weather[[1]]$description)) %>%
rename(Date = new_date)
datatable(table_plot,
options = list(searching = FALSE,
paging = FALSE),
rownames=FALSE)
})
}
shiny::runApp('Dashboard-Weather-main')
runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
runApp('hiepdvhe181185')
runApp('Dashboard-Weather-main')
runApp('Dashboard-Weather-main')
runApp('Dashboard-Weather-main')
runApp('Dashboard-Weather-main')
runApp('Dashboard-Weather-main')
shiny::runApp('hiepdvhe181185')
runApp('hiepdvhe181185')
runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
shiny::runApp('hiepdvhe181185')
shiny::runApp('E:/ki 5/dsr-1')
